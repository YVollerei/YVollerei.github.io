<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yu的炼金工房</title>
  
  
  <link href="https://atelieryu.site/atom.xml" rel="self"/>
  
  <link href="https://atelieryu.site/"/>
  <updated>2025-03-18T17:07:00.000Z</updated>
  <id>https://atelieryu.site/</id>
  
  <author>
    <name>Yu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2025一月番追番记录</title>
    <link href="https://atelieryu.site/posts/bb92517d.html"/>
    <id>https://atelieryu.site/posts/bb92517d.html</id>
    <published>2025-03-16T09:24:00.000Z</published>
    <updated>2025-03-18T17:07:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="食用说明"><a href="#食用说明" class="headerlink" title="食用说明"></a>食用说明</h1><ol><li>本文更偏向追番体验的记录，可能与补番体验略有不同</li><li>本文评分体系近似bangumi，以下为分数区间参考含义<ul><li>&gt;9：全人类都应该来看</li><li>&gt;8：必看神作</li><li>&gt;7：值得一看</li><li>&gt;6：闲的没事可以看</li><li>&gt;5：平平无奇</li><li>&lt;5：献给小众赤石爱好者的一封情书</li></ul></li><li>本文完全由主观构成，没有客观</li></ol><h1 id="2025一月番简评"><a href="#2025一月番简评" class="headerlink" title="2025一月番简评"></a>2025一月番简评</h1><h2 id="8分段"><a href="#8分段" class="headerlink" title="8分段"></a>8分段</h2><h3 id="金牌得主"><a href="#金牌得主" class="headerlink" title="金牌得主"></a>金牌得主</h3><p><img src="https://atelieryu.xyz/elog/202503/dbe4984261187c28c97afa31519a9d10.jpg" alt="medalist.jpg"></p><blockquote><p>“花滑是见证奇迹的运动”</p></blockquote><p><del>没想到小女孩滑冰这么好看。</del>看一半没忍住把漫画全补完了，原作质量过于硬了（<del>原作得了mvp，engi就是躺赢狗，全人类都应该看这部漫画</del>），动画制作虽然还是差一些（比如部分文戏），但花滑部分是真用心做了。原作花滑的分镜固然震撼，但动画里能看到角色流畅地完成一个个花滑动作也是一种别样的享受。这部番的魅力很难用三言两语描述出来，总之都给我去看呀（</p><ul><li><strong>对于体育的刻画</strong>：这部番对于花滑这项体育运动的刻画是真好啊，优雅而又残酷。</li><li><strong>对于人物的刻画</strong>：无论是主角和几乎每一位配角都有比较立体的刻画。尤其是主角的小祈和司教练。</li><li><strong>女女关系性</strong>：<del>小女孩也能有女女关系性？</del>虽然到漫画后期关系性才开始发力</li><li><strong>制作组对作品的热情</strong>：你是说，原作者厨的声优喜欢花滑，于是画了花滑为主题的漫画 → 八爷厨漫画主动请缨给漫画唱op → 花滑顶尖运动员羽生结弦欣赏八爷的才华同意合拍op的mv？就连平时和p9坐一桌的engi都开始发力了</li></ul><blockquote><p>综合打分——8</p></blockquote><ul><li>剧情：8.5</li><li>人设：8</li><li>动画制作：7.6</li></ul><h2 id="7分段"><a href="#7分段" class="headerlink" title="7分段"></a>7分段</h2><h3 id="喜欢的冲绳妹说方言"><a href="#喜欢的冲绳妹说方言" class="headerlink" title="喜欢的冲绳妹说方言"></a><strong>喜欢的冲绳妹说方言</strong></h3><p><img src="https://atelieryu.xyz/elog/202503/7f4a23f11ed367ec74ef117ee2aeac12.jpg" alt="uchina.jpg"></p><blockquote><p>人文纪录片 + 恋爱喜剧</p></blockquote><p>近几年还挺流行通过动漫来进行地区宣传的，虽然好看的也有一些（比如佐贺偶像是传奇），但看完真正让我产生“好想去这里旅游啊”的想法的这还是第一部。人文纪录片和恋爱喜剧两个都是我比较喜欢的类型，本季个人最佳大脑按摩番。</p><ul><li><strong>人文纪录片</strong>：剧中把各种因为文化、自然环境等因素产生的习俗差异，自然地融入了角色的日常交流中。与其说是在地区宣传中加入角色互动，不如说是通过角色互动中自然产生的交流gap来科普地区特色，加上段子情节设计的也都挺有趣，看的乐呵的同时还能学到不少异域豆知识。</li><li><strong>恋爱喜剧</strong>：<del>女二好可爱呀好可爱呀。本来我对于黑皮是拒绝的，但女二真的好可爱啊（本季第二喜欢的女角色）</del>。男主喜欢女主，女二喜欢男主，看起来扭曲的设定实际却异常清爽（原因是女二一个人贡献了全片90%以上的恋爱桥段），看女二一直自我拉扯还是挺有趣的（听漫画党说后面女二有望反杀女主，希望是真的）。</li></ul><blockquote><p>综合打分——7.6</p></blockquote><ul><li><del>剧情</del>有趣度：7.7</li><li>人设：7.7（7.2 女二再加0.5）</li><li>动画制作：7.2</li></ul><h3 id="群花绽放，彷如修罗"><a href="#群花绽放，彷如修罗" class="headerlink" title="群花绽放，彷如修罗"></a><strong>群花绽放，彷如修罗</strong></h3><p><img src="https://atelieryu.xyz/elog/202503/e73e378e85ae3f374b5a816e84a46b0e.jpg" alt="hana.jpg"></p><blockquote><p>青春+社团活动+苦呀西（武田三板斧）</p></blockquote><ul><li><strong>有点尬的朗读演出</strong>：说实在朗读这个题材是真不太能get到，平时没接触过这个领域，单纯听也听不出名堂（毕竟天天听各种专业声优的配音）。制作组选择用领域展开这种方式表现朗读在我看来是有点尬的，所以朗读方面对我来讲是减分项。</li><li><strong>意外的文戏水平</strong>：这番在文戏上的刻画倒是渐入佳境，特别是在三四集左右进入各个部员的个人回，每集都看的挺舒服的。每个人都有各自的追求和心结，但又不拧巴。第九集的重女登场更是为我提供了不少乐子。</li><li><strong>可爱的女主</strong>：本番还贡献了本季度我最喜欢的女主（<del>花奈像只小动物一样，真的好可爱呀好可爱呀好可爱呀</del>）</li></ul><p><img src="https://atelieryu.xyz/elog/202503/1c1b2dc84f2e71b63751487b5e3a18fa.png" alt="image.png"></p><blockquote><p>综合打分——7.6</p></blockquote><ul><li>剧情：7.5</li><li>人设：8（7.5女主再加0.5）</li><li>动画制作：7.5</li></ul><h3 id="中年大叔转生恶役大小姐"><a href="#中年大叔转生恶役大小姐" class="headerlink" title="中年大叔转生恶役大小姐"></a>中年大叔转生恶役大小姐</h3><p><img src="https://atelieryu.xyz/elog/202503/76d5a1d2eae80ad8a1b8bd91951e84cb.jpg" alt="ojisan.jpg"></p><blockquote><p>体制内老干部的优雅与从容</p></blockquote><p>恶役系除了第一部猴王其他都没看完，几乎都是一个模板套出来的，导致越看越觉得土。这部倒是做出了特色，中年大叔转生，利用多年体制内混出来的情商俘获一群人心。段子设计的也挺好（怀疑作者真是中年体制内老干部），甚至设定里还有一丝悬疑味。每周打开前都觉得好土，但最后又都是开心地看完一集（</p><blockquote><p>综合打分——7.2</p></blockquote><ul><li>有趣度：7.5</li><li>人设：6.8</li><li>动画制作：6.9</li></ul><h3 id="一杆青空"><a href="#一杆青空" class="headerlink" title="一杆青空"></a>一杆青空</h3><p><img src="https://atelieryu.xyz/elog/202503/84b2ab9241b002fe2da88dea8091d697.jpg" alt="sorairo.jpg"></p><blockquote><p>少女高尔夫</p></blockquote><p>本来对高尔夫这项运动也没啥兴趣（刻板印象：中年有钱大叔们谈生意的娱乐活动），结果看着看着居然能get到一点乐趣了。算向山进发类型片吧，看着比较空气系但却并不无聊，看美少女们开开心心做点啥还是比较放空大脑的。此外女主也挺可爱的（说不出啥原因，就感觉蛮可爱的）</p><blockquote><p>综合评分——7.1</p></blockquote><ul><li>日常感：7.2</li><li>人设：7.2</li><li>动画制作：6.8</li></ul><h2 id="6分段"><a href="#6分段" class="headerlink" title="6分段"></a>6分段</h2><h3 id="不想加班的公会柜台小姐单挑BOSS"><a href="#不想加班的公会柜台小姐单挑BOSS" class="headerlink" title="不想加班的公会柜台小姐单挑BOSS"></a>不想加班的公会柜台小姐单挑BOSS</h3><p><img src="https://atelieryu.xyz/elog/202503/f4bab2b9a92c88c3ffe0efd5ef15dc84.jpg" alt="giruto.jpg"></p><blockquote><p>她太喜欢当公务员了</p></blockquote><p>女主实在是太爱国了，明明随手打一个boss的报酬就够躺平好久，但她还是选择了天天加班当公务员，除了爱国想不出别的理由（</p><p>经典凤傲天番，看点是同类型中不错的制作水平（cw你有空做这个不如早点凑齐人手把我孤独摇滚第二季吐出来）和无处不在的女主大腿特写（上面的宣传图就能看出端倪了吧）。总之不带大脑1.5倍速看还算能看</p><blockquote><p>综合评分——6.2</p></blockquote><ul><li>剧情：5.2</li><li>人设：6.5</li><li>动画制作：7</li></ul><h2 id="4分段"><a href="#4分段" class="headerlink" title="4分段"></a>4分段</h2><h3 id="颂乐人偶（BanG-Dream-Ave-Mujica）"><a href="#颂乐人偶（BanG-Dream-Ave-Mujica）" class="headerlink" title="颂乐人偶（BanG Dream! Ave Mujica）"></a>颂乐人偶（BanG Dream! Ave Mujica）</h3><p><img src="https://atelieryu.xyz/elog/202503/04ea7b35fd43ab92229f73fcea9b1a18.jpg" alt="mujica.jpg"></p><blockquote><p>制作组的丑陋乐章与沦为人偶的角色</p></blockquote><p>虽然想到大概率会翻车，但能烂到这种程度是真没想到。<del>我又幻想了，幻想独角兽老师归来重置母鸡卡，负责全部集数的脚本，所有爆点都处理的酣畅淋漓，剧本完成度甚至超越前作MyGo，一举拿下2025年度动画</del></p><ul><li><strong>逻辑混乱的剧情</strong>：团炸的莫名其妙，重组的也莫名其妙，角色性格转变的也莫名其妙。能看出剧情大纲是没大问题了，但具体实施到细节就充满了随意与混乱。</li><li><strong>崩坏无常的人设</strong>：角色没一个是人：只对熟人哈气的多重人格大祥，真多重人格的精神病睦、让30个乐队倒大霉的信用复读机海玲、强制soulmate的喵梦、地上狗爬的初华。未免过于不爱惜自己笔下的角色了</li><li><strong>毫无底线的炒作</strong>：制作组没那实力又想炒波大的。前几集每集结尾都在炒，然后下一集开头又轻轻放下；中间几集围绕一个多重人格的烂活硬炒几集，还把前作角色的人设给整崩了；最后几集没活了又炒出个二次元雷雨。评价是为了热度连🐎都不要了。</li></ul><blockquote><p>综合评分——4.2</p></blockquote><ul><li>剧情：3</li><li>人设：3</li><li>动画制作：7.3</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://atelieryu.xyz/elog/202503/9e7c4c3344f2187d5360c05056559774.png" alt="2025winter.png"></p><p>（什么是论外？mujica带给我的失望是真的，追番过程每周磕假药溜二创带给我的快乐难道就不是真的吗？或许它最后烂了，但下次碰到这种番我肯定还会追的，毕竟长颈鹿渴望的永远是无法预测的命运之舞台呀）</p><p>以为只是个过渡季，没想到黑马还挺多的，追番体验大概如上吧，比其往年平淡的一月，这季度看的还是比较开心的</p><p>还有几部续作，比如百人女友、异修罗、石纪元，准备之后再补。上季度看一半搁置的甘神家和青之箱有空可能也会补回来。</p><h1 id="2025四月番前瞻"><a href="#2025四月番前瞻" class="headerlink" title="2025四月番前瞻"></a>2025四月番前瞻</h1><p>度过了较为平淡的一月，四月就热闹起来了。数了数感兴趣的居然有16部</p><h2 id="夏日口袋"><a href="#夏日口袋" class="headerlink" title="夏日口袋"></a>夏日口袋</h2><p><img src="https://atelieryu.xyz/elog/202503/b750ead19b9bb7a15fc51e8d9a5f1302.jpg" alt="%E5%A4%8F%E6%97%A5%E5%8F%A3%E8%A2%8B.jpg"></p><p>夏季是我最喜欢的季节，暑假是一年中我最喜欢的时期，而Summer Pocket则是我认为对暑期感描写的最好的作品之一。原作是我最喜欢的Gal之一，希望feel能给点劲把它做好吧。重振Gal改荣光（<br>（顺带一提本站左下角的歌单中就有不少曲子出自Summer Pocket原作，夏日感没得说）</p><h2 id="机动战士高达GQuuuuuuX"><a href="#机动战士高达GQuuuuuuX" class="headerlink" title="机动战士高达GQuuuuuuX"></a><strong>机动战士高达GQuuuuuuX</strong></h2><p><img src="https://atelieryu.xyz/elog/202503/441462356fded410db4427fc91d5dbe3.jpg" alt="GQuuuuuuX.jpg"></p><p>庵野秀明编剧 + 吉翁反杀联邦if线 + 过于标新立异的机设，反正噱头是已经拉满了，看肯定是会看的，但感觉翻车率拉满（得有个70%+的翻车率吧）。是时候把之前坑的Z高达补完了</p><h2 id="LAZARUS"><a href="#LAZARUS" class="headerlink" title="LAZARUS"></a><strong>LAZARUS</strong></h2><p><img src="https://atelieryu.xyz/elog/202503/d58312a81eb7f7be7e9c31a239ec864f.jpg" alt="LAZARUS.jpg"></p><p>渡边信一郎导演的新作 + 近年来稳定高质量的Mappa + 听说已经完成制作的超充裕工期，好像还请来的疾速追杀系列的动作设计（不怎么看电影不太熟就是了），同样噱头拉满，但感觉比GQuuuX稳多了。</p><h2 id="赛马娘-芦毛灰姑娘"><a href="#赛马娘-芦毛灰姑娘" class="headerlink" title="赛马娘 芦毛灰姑娘"></a><strong>赛马娘 芦毛灰姑娘</strong></h2><p><img src="https://atelieryu.xyz/elog/202503/eb1f0a3356127d4947278ebc864b88d8.jpg" alt="%E8%B5%9B%E9%A9%AC%E5%A8%98_%E8%8A%A6%E6%AF%9B%E7%81%B0%E5%A7%91%E5%A8%98.jpg"></p><p>听漫画原作党说是赛马娘系列最优秀的作品，小栗帽也是日本人气断层领先的赛马，Cy应该会拿出全力做吧，顶尖之路和新时代之扉做的都挺好的，还是值得一看的（虽然看制作人员好像还是有点危险）</p><h2 id="魔女与使魔"><a href="#魔女与使魔" class="headerlink" title="魔女与使魔"></a>魔女与使魔</h2><p><img src="https://atelieryu.xyz/elog/202503/f7514468c2e15d5167a4124b69faf28b.jpg" alt="%E9%AD%94%E5%A5%B3%E4%B8%8E%E4%BD%BF%E9%AD%94.jpg"></p><p>原作是jump中坚之一，看pv表现挺好的，制作不错，pv里都有不少笑点，校园恋爱喜剧一直是我比较喜欢的类型，应该是会追下去的</p><h2 id="mono女孩"><a href="#mono女孩" class="headerlink" title="mono女孩"></a>mono女孩</h2><p><img src="https://atelieryu.xyz/elog/202503/87704935c7a772bc38b7da56d34fa0af.jpg" alt="mono%E5%A5%B3%E5%AD%A9.jpg"></p><p>摇曳露营代餐其一，摇曳露营原作者的另一部作品，好像是摄影为主题的。没啥好说的，先追着</p><h2 id="杂旅"><a href="#杂旅" class="headerlink" title="杂旅"></a>杂旅</h2><p><img src="https://atelieryu.xyz/elog/202503/edda6f86ef1858c336da8a41b8c8a766.jpg" alt="%E6%9D%82%E6%97%85.jpg"></p><p>摇曳露营代餐其二，以旅行为主题的作品，可能成为日本旅游guidebook，没啥好说的，先追着</p><h2 id="时光流逝-饭菜依旧美味"><a href="#时光流逝-饭菜依旧美味" class="headerlink" title="时光流逝 饭菜依旧美味"></a>时光流逝 饭菜依旧美味</h2><p><img src="https://atelieryu.xyz/elog/202503/efbc9571de508608f09524eb2076b0f6.jpg" alt="%E6%97%B6%E5%85%89%E6%B5%81%E9%80%9D_%E9%A5%AD%E8%8F%9C%E4%BE%9D%E6%97%A7%E7%BE%8E%E5%91%B3.jpg"></p><p>PA的原创，以美食为主题，PA制作的下限一直都挺高，感觉是每一部都在认真做，但之前几部作品总是看着看着就觉得无聊弃坑了。这部也准备先追几集看看吧，毕竟PA的美少女画的都挺可爱的（</p><h2 id="忍者与杀手二人组的日常生活"><a href="#忍者与杀手二人组的日常生活" class="headerlink" title="忍者与杀手二人组的日常生活"></a>忍者与杀手二人组的日常生活</h2><p><img src="https://atelieryu.xyz/elog/202503/09116b1547639eceacb0964139a146cd.jpg" alt="%E5%BF%8D%E8%80%85%E4%B8%8E%E6%9D%80%E6%89%8B%E4%BA%8C%E4%BA%BA%E7%BB%84%E7%9A%84%E6%97%A5%E5%B8%B8%E7%94%9F%E6%B4%BB.jpg"></p><p><del>我超忍杀二</del>看pv女角色都蛮可爱的，但好像是主打反差的（指可爱的妹子下一集就惨死，<del>这也是末世之法的一个侧面</del>），看多了轻松日常番来点这类番调节一下口味也是不错的</p><h2 id="摇滚乐是淑女的嗜好"><a href="#摇滚乐是淑女的嗜好" class="headerlink" title="摇滚乐是淑女的嗜好"></a>摇滚乐是淑女的嗜好</h2><p><img src="https://atelieryu.xyz/elog/202503/5f397b019511285d4744731e99cddc39.jpg" alt="%E6%91%87%E6%BB%9A%E4%B9%90%E6%98%AF%E6%B7%91%E5%A5%B3%E7%9A%84%E5%97%9C%E5%A5%BD.jpg"></p><p>最新的少女乐队番，看点好像是少女们边摇滚边颜艺彪垃圾话，emmm，这就是摇滚吗，总之先看几集吧</p><h2 id="启示录酒店"><a href="#启示录酒店" class="headerlink" title="启示录酒店"></a>启示录酒店</h2><p><img src="https://atelieryu.xyz/elog/202503/bfd937ede8da9855f132a7f05fb2cb40.jpg" alt="%E5%90%AF%E7%A4%BA%E5%BD%95%E9%85%92%E5%BA%97.jpg"></p><p>Cy的一部原创番，看设定有点像几年前的星之梦。总觉得好久没公司做这类催泪番了，结果这季度出了夏日口袋还有这么一部原创。这类作品感觉更适合补番？</p><h2 id="搞笑漫画日和-第5期"><a href="#搞笑漫画日和-第5期" class="headerlink" title="搞笑漫画日和 第5期"></a>搞笑漫画日和 第5期</h2><p><img src="https://atelieryu.xyz/elog/202503/9fca3b749d3f31e6217e171e45f373a0.jpg" alt="%E6%90%9E%E7%AC%91%E6%BC%AB%E7%94%BB%E6%97%A5%E5%92%8C_%E7%AC%AC5%E6%9C%9F.jpg"></p><p>这是真童年了啊，入动画坑前就看过的作品，产出的不少梗到今天还有生命力。不知道隔了这么久的动画化还是不是内味（也有可能我的口味变了，导致看不进去了，唉）</p><h2 id="乡下大叔成为剑圣"><a href="#乡下大叔成为剑圣" class="headerlink" title="乡下大叔成为剑圣"></a>乡下大叔成为剑圣</h2><p><img src="https://atelieryu.xyz/elog/202503/beb32691702746a2cd938a72a367afdb.jpg" alt="%E4%B9%A1%E4%B8%8B%E5%A4%A7%E5%8F%94%E6%88%90%E4%B8%BA%E5%89%91%E5%9C%A3.jpg"></p><p>之前吃安利看过原作，原作剧情比较平庸，但画的分镜和动作相当出色，角色的动作甚至感觉现实中也具有实战意义，真的能让人感受到武术的美感。动画不知道能不能体现好</p><h2 id="阳光马达棒球场"><a href="#阳光马达棒球场" class="headerlink" title="阳光马达棒球场"></a>阳光马达棒球场</h2><p><img src="https://atelieryu.xyz/elog/202503/2b670f8bceef549d680cc1f41ada8f37.jpg" alt="%E9%98%B3%E5%85%89%E9%A9%AC%E8%BE%BE%E6%A3%92%E7%90%83%E5%9C%BA.jpg"></p><p>好像讲的不是棒球，而是围绕棒球的各类人群（看客、售货员、解说等）的群像剧。有点兴趣，感觉有成为泛鸽鸽每周六直播间下播番的潜力</p><h2 id="拜托请穿上-鹰峰同学"><a href="#拜托请穿上-鹰峰同学" class="headerlink" title="拜托请穿上 鹰峰同学"></a>拜托请穿上 鹰峰同学</h2><p><img src="https://atelieryu.xyz/elog/202503/eca1c2b813c2442060670f8deb5a0181.jpg" alt="%E6%8B%9C%E6%89%98%E8%AF%B7%E7%A9%BF%E4%B8%8A_%E9%B9%B0%E5%B3%B0%E5%90%8C%E5%AD%A6.jpg"></p><p>福利番一号，还有表里版。十年前我还觉得看这种卖肉番不如去看里番，而在现在里番业界不断走下坡，真得表番来当里番代餐了。这部人设还挺好看的，可能会看？</p><h2 id="快藏起来-玛琪娜同学"><a href="#快藏起来-玛琪娜同学" class="headerlink" title="快藏起来 玛琪娜同学"></a>快藏起来 玛琪娜同学</h2><p><img src="https://atelieryu.xyz/elog/202503/a9e3bbafe2b4048dd06161a3c16fca65.jpg" alt="%E5%BF%AB%E8%97%8F%E8%B5%B7%E6%9D%A5_%E7%8E%9B%E7%90%AA%E5%A8%9C%E5%90%8C%E5%AD%A6.jpg"></p><p>福利番二号，性x机器人，总觉得能看到未来（</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;食用说明&quot;&gt;&lt;a href=&quot;#食用说明&quot; class=&quot;headerlink&quot; title=&quot;食用说明&quot;&gt;&lt;/a&gt;食用说明&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;本文更偏向追番体验的记录，可能与补番体验略有不同&lt;/li&gt;
&lt;li&gt;本文评分体系近似bangumi，以下为分数区</summary>
      
    
    
    
    <category term="ACGN" scheme="https://atelieryu.site/categories/ACGN/"/>
    
    
    <category term="追番记录" scheme="https://atelieryu.site/tags/%E8%BF%BD%E7%95%AA%E8%AE%B0%E5%BD%95/"/>
    
    <category term="动画" scheme="https://atelieryu.site/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>基于Elog的 Notion-hexo 同步方案</title>
    <link href="https://atelieryu.site/posts/3bcc203.html"/>
    <id>https://atelieryu.site/posts/3bcc203.html</id>
    <published>2025-03-16T03:37:00.000Z</published>
    <updated>2025-03-16T14:18:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="博客工具"><a href="#博客工具" class="headerlink" title="博客工具"></a>博客工具</h1><ul><li>写作平台：<a href="https://www.notion.so/">Notion</a></li><li>博客平台：<a href="https://hexo.io/">Hexo</a></li><li>博客主题：<a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly</a></li><li>博客文档同步：<a href="https://github.com/LetTTGACO/elog">Elog</a></li><li>原项目仓库：<a href="https://github.com/elog-x/notion-hexo">https://github.com/elog-x/notion-hexo</a></li></ul><h1 id="博客搭建指南"><a href="#博客搭建指南" class="headerlink" title="博客搭建指南"></a>博客搭建指南</h1><h2 id="Fork模板仓库"><a href="#Fork模板仓库" class="headerlink" title="Fork模板仓库"></a>Fork模板仓库</h2><p>将<a href="https://github.com/elog-x/notion-hexo">模板仓库</a> clone 到本地</p><h3 id="之前已经有博客的情况"><a href="#之前已经有博客的情况" class="headerlink" title="之前已经有博客的情况"></a>之前已经有博客的情况</h3><ol><li><p>使用旧博客文件<strong>覆盖</strong>博客仓库</p></li><li><p>修改<code>package.json</code>中的依赖：</p> <figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;hexo-site&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.0.0&quot;,</span><br><span class="line">  &quot;private&quot;: true,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;build&quot;: &quot;hexo generate&quot;,</span><br><span class="line">    &quot;clean&quot;: &quot;hexo clean&quot;,</span><br><span class="line">    &quot;deploy&quot;: &quot;hexo deploy&quot;,</span><br><span class="line"><span class="addition">+   &quot;server&quot;: &quot;hexo clean &amp;&amp; hexo server&quot;,</span></span><br><span class="line"><span class="addition">+   &quot;sync:local&quot;: &quot;elog sync -e .elog.env&quot;,</span></span><br><span class="line"><span class="addition">+   &quot;elog:init&quot;: &quot;elog init&quot;,</span></span><br><span class="line"><span class="addition">+   &quot;sync&quot;: &quot;elog sync&quot;,</span></span><br><span class="line"><span class="addition">+   &quot;elog:clean&quot;: &quot;elog clean&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hexo&quot;: &#123;</span><br><span class="line">    &quot;version&quot;: &quot;7.3.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line"><span class="addition">+   &quot;@elog/cli&quot;: &quot;^0.14.0&quot;,</span></span><br><span class="line">    &quot;hexo&quot;: &quot;^7.0.0&quot;,</span><br><span class="line">    &quot;hexo-abbrlink&quot;: &quot;^2.2.1&quot;,</span><br><span class="line">    &quot;hexo-bilibili-bangumi&quot;: &quot;^1.10.8&quot;,</span><br><span class="line">    &quot;hexo-butterfly-categories-card&quot;: &quot;^1.0.0&quot;,</span><br><span class="line">    &quot;hexo-butterfly-clock-anzhiyu&quot;: &quot;^1.1.8&quot;,</span><br><span class="line">    &quot;hexo-butterfly-envelope&quot;: &quot;^1.0.15&quot;,</span><br><span class="line">    &quot;hexo-butterfly-footer-beautify&quot;: &quot;^1.0.6&quot;,</span><br><span class="line">    &quot;hexo-butterfly-tag-plugins-plus&quot;: &quot;^1.0.18&quot;,</span><br><span class="line">    &quot;hexo-butterfly-wowjs&quot;: &quot;^1.0.5&quot;,</span><br><span class="line">    &quot;hexo-deployer-git&quot;: &quot;^4.0.0&quot;,</span><br><span class="line">    &quot;hexo-generator-archive&quot;: &quot;^2.0.0&quot;,</span><br><span class="line">    &quot;hexo-generator-category&quot;: &quot;^2.0.0&quot;,</span><br><span class="line">    &quot;hexo-generator-feed&quot;: &quot;^3.0.0&quot;,</span><br><span class="line">    &quot;hexo-generator-index&quot;: &quot;^3.0.0&quot;,</span><br><span class="line">    &quot;hexo-generator-search&quot;: &quot;^2.4.3&quot;,</span><br><span class="line">    &quot;hexo-generator-sitemap&quot;: &quot;^3.0.1&quot;,</span><br><span class="line">    &quot;hexo-generator-tag&quot;: &quot;^2.0.0&quot;,</span><br><span class="line">    &quot;hexo-renderer-ejs&quot;: &quot;^2.0.0&quot;,</span><br><span class="line">    &quot;hexo-renderer-kramed&quot;: &quot;^0.1.4&quot;,</span><br><span class="line"><span class="addition">+   &quot;hexo-renderer-marked&quot;: &quot;^6.0.0&quot;,</span></span><br><span class="line">    &quot;hexo-renderer-pug&quot;: &quot;^3.0.0&quot;,</span><br><span class="line">    &quot;hexo-renderer-stylus&quot;: &quot;^3.0.1&quot;,</span><br><span class="line">    &quot;hexo-server&quot;: &quot;^3.0.0&quot;,</span><br><span class="line">    &quot;hexo-tag-aplayer&quot;: &quot;^3.0.4&quot;,</span><br><span class="line">    &quot;hexo-theme-landscape&quot;: &quot;^1.0.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;hexo-generator-baidu-sitemap&quot;: &quot;^0.1.9&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>继续后续操作</p></li></ol><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>在项目根目录下运行命令安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h2 id="新建-Elog-本地调试文件"><a href="#新建-Elog-本地调试文件" class="headerlink" title="新建 Elog 本地调试文件"></a><strong>新建 Elog 本地调试文件</strong></h2><ol><li>将<code>.elog.example.env</code>文件重命名为<code>.elog.env</code>，此文件将用于本地同步Notion 文档</li></ol><h2 id="配置-Notion-关键信息"><a href="#配置-Notion-关键信息" class="headerlink" title="配置 Notion 关键信息"></a>配置 Notion 关键信息</h2><h3 id="配置流程"><a href="#配置流程" class="headerlink" title="配置流程"></a>配置流程</h3><ol><li>使用 <a href="https://1874.notion.site/09ff9e1e141744c6af0a1f69d2a3d834?v=a09065f9266446afa745b475044daca6"><strong>Database 模板</strong></a> 创建数据库副本或增加必要属性到已有 Notion 数据库<ul><li>博客平台为Hexo时，可参考<a href="https://1874.notion.site/867486af567f4a8897427b15ffd10b3c?v=a25aec8e27d5415e8605e43034f822bd"><strong>elog-hexo-template</strong></a> 创建数据库副本或增加必要属性到已有 Notion 数据库</li></ul></li><li>创建 Integration Token，具体请参考 <a href="https://developers.notion.com/docs/create-a-notion-integration#create-your-integration-in-notion"><strong>Notion 官方教程</strong></a></li><li>将复制的数据库连接到刚创建的 Integration，具体请参考 <a href="https://developers.notion.com/docs/create-a-notion-integration#give-your-integration-page-permissions"><strong>Notion 官方教程</strong></a></li><li>获取数据库 DatabaseId</li></ol><p>按照<a href="https://elog.1874.cool/notion/gvnxobqogetukays#notion">文档提示</a>配置 Notion 并获取 <code>token</code> 和 <code>databaseId</code>，在本地<code>.elog.env</code>中写入</p><figure class="highlight plaintext"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NOTION_TOKEN=获取的token</span><br><span class="line">NOTION_DATABASE_ID=获取的databaseId</span><br></pre></td></tr></table></figure><h3 id="配置Notion-Database"><a href="#配置Notion-Database" class="headerlink" title="配置Notion Database"></a>配置Notion Database</h3><p>示例：</p><p><img src="https://atelieryu.xyz/elog-image-plugin-test/a2be76ee2e6a013e213586a7e524b722.png" alt="image.png"></p><p>Database字段：</p><ul><li><code>permalink</code>为文档的永久链接，例如<code>https://notion-hexo.vercel.app/notion-hexo/</code>，注意记得在结尾加上<code>/</code></li><li><code>categories</code>为文档的分类</li><li><code>tags</code> 为文档的标签</li><li><code>description</code>为主题配置中可选的文档描述</li></ul><h3 id="获取token"><a href="#获取token" class="headerlink" title="获取token"></a>获取token</h3><ol><li><p>登录Notion 网页版 &#x3D;&gt;访问<a href="https://www.notion.so/my-integrations">My integrations</a> &#x3D;&gt;New Integration &#x3D;&gt; 生成 Internal Integration Token</p><p> <img src="https://atelieryu.xyz/elog-image-plugin-test/2a01b8634fd5897a79a9fa367d6502c2.png" alt="image.png"></p></li><li><p>Internal Intergration Secret即为token</p><p> <img src="https://atelieryu.xyz/elog-image-plugin-test/35735ef273abc3537dad0072dec232f5.png" alt="image.png"></p></li><li><p>在使用的Notion Database页面点击右上角设置→Connections，选择刚才创建的Integration</p><p> <img src="https://atelieryu.xyz/elog-image-plugin-test/bc53f185657c5009ec62d22aafdb14ed.png" alt="image.png"></p></li></ol><p>其他注意事项：</p><ul><li>notion文章必须有封面（cover），否则同步会失败</li></ul><h3 id="获取DatabaseId"><a href="#获取DatabaseId" class="headerlink" title="获取DatabaseId"></a>获取DatabaseId</h3><p>图中url中红框部分（1b8a0f24b32980ca9c66cbc557236562）即为DatabaseId</p><p><img src="https://atelieryu.xyz/elog-image-plugin-test/3ec5b264fea657120d4bf98a8801b77c.png" alt="029401505f8359601294e9d4af319792.png"></p><h2 id="本地调试"><a href="#本地调试" class="headerlink" title="本地调试"></a>本地调试</h2><p>在项目根目录运行同步命令，Notion Database中的文章就会被全部同步值本地</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm run sync:local</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或</span></span><br><span class="line">elog sync -e .elog.env</span><br></pre></td></tr></table></figure><h1 id="Elog配置CloudFlare-R2图床"><a href="#Elog配置CloudFlare-R2图床" class="headerlink" title="Elog配置CloudFlare R2图床"></a>Elog配置CloudFlare R2图床</h1><p><a href="https://github.com/LetTTGACO/elog/tree/master/plugins/plugin-img-r2#readme">官方插件文档</a></p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a><strong>安装插件</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @elog/plugin-img-r2</span><br></pre></td></tr></table></figure><h2 id="配置-elog-config-js"><a href="#配置-elog-config-js" class="headerlink" title="配置 elog.config.js"></a><strong>配置 elog.config.js</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// elog.config.js</span></span><br><span class="line"><span class="keyword">const</span> r2 = <span class="built_in">require</span>(<span class="string">&#x27;@elog/plugin-img-r2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...省略</span></span><br><span class="line">  <span class="attr">image</span>: &#123;</span><br><span class="line">    <span class="attr">enable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">plugin</span>: r2,</span><br><span class="line">    <span class="attr">r2</span>: &#123;</span><br><span class="line">      <span class="attr">accessKeyId</span>: process.<span class="property">env</span>.<span class="property">R2_ACCESSKEYID</span>,</span><br><span class="line">      <span class="attr">secretAccessKey</span>: process.<span class="property">env</span>.<span class="property">R2_SECRET_ACCESSKEY</span>,</span><br><span class="line">      <span class="attr">bucket</span>: process.<span class="property">env</span>.<span class="property">R2_BUCKET</span>,</span><br><span class="line">      <span class="attr">endpoint</span>: process.<span class="property">env</span>.<span class="property">R2_ENDPOINT</span>,</span><br><span class="line">      <span class="attr">host</span>: process.<span class="property">env</span>.<span class="property">R2_HOST</span>,</span><br><span class="line">      <span class="attr">prefixKey</span>: <span class="string">&#x27;elog-image-plugin-test&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置-elog-env文件"><a href="#配置-elog-env文件" class="headerlink" title="配置 .elog.env文件"></a>配置 .elog.env文件</h2><p>在 .elog.env 中插入以下信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .elog.env 配置R2 相关账号参数</span></span><br><span class="line"><span class="comment">#R2</span></span><br><span class="line"><span class="comment"># 访问密钥 ID</span></span><br><span class="line"><span class="string">R2_ACCESSKEYID=</span></span><br><span class="line"><span class="comment"># 机密访问密钥</span></span><br><span class="line"><span class="string">R2_SECRET_ACCESSKEY=</span></span><br><span class="line"><span class="string">R2_ENDPOINT=</span></span><br><span class="line"><span class="comment"># R2 需要使r2.dev子域供网络访问或者绑定自己的域名</span></span><br><span class="line"><span class="string">R2_HOST=</span></span><br><span class="line"><span class="string">R2_BUCKET=</span></span><br></pre></td></tr></table></figure><ul><li>R2_ACCESSKEYID、R2_SECRET_ACCESSKEY、R2_ENDPOINT：API令牌中查看</li><li>R2_HOST：生成的R2.dev子域 或 自己的域名</li><li>R2_BUCKET：存储桶的名称</li></ul><p><img src="https://atelieryu.xyz/elog-image-plugin-test/cb3779952158c30a0a2591b0797040e9.png" alt="image.png"></p><p>令牌信息仅在创建令牌时显示一次，之后无法再次查看，如需查看只能选择轮转重新生成令牌信息。</p><p><img src="https://atelieryu.xyz/elog-image-plugin-test/76cd80a3e9d22864fee2c756afaea01f.png" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;博客工具&quot;&gt;&lt;a href=&quot;#博客工具&quot; class=&quot;headerlink&quot; title=&quot;博客工具&quot;&gt;&lt;/a&gt;博客工具&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;写作平台：&lt;a href=&quot;https://www.notion.so/&quot;&gt;Notion&lt;/a&gt;&lt;/li&gt;
&lt;l</summary>
      
    
    
    
    <category term="技术随记" scheme="https://atelieryu.site/categories/%E6%8A%80%E6%9C%AF%E9%9A%8F%E8%AE%B0/"/>
    
    
    <category term="elog" scheme="https://atelieryu.site/tags/elog/"/>
    
    <category term="notion" scheme="https://atelieryu.site/tags/notion/"/>
    
    <category term="hexo" scheme="https://atelieryu.site/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Test</title>
    <link href="https://atelieryu.site/posts/784dd132.html"/>
    <id>https://atelieryu.site/posts/784dd132.html</id>
    <published>2025-03-13T13:26:59.000Z</published>
    <updated>2025-03-15T14:06:51.283Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Test-外挂标签"><a href="#Test-外挂标签" class="headerlink" title="Test 外挂标签"></a>Test 外挂标签</h1><h2 id="行内span"><a href="#行内span" class="headerlink" title="行内span"></a>行内span</h2><p>测试测试测试<span class='p red'>测试</span><span class='p blue'>测试</span></p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><div class="note info simple"><p>info 提示块标签</p></div><h2 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h2><div class='checkbox'><input type="checkbox" />            <p>测试</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>测试</p>            </div><h2 id="radio"><a href="#radio" class="headerlink" title="radio"></a>radio</h2><div class='checkbox'><input type="radio" />            <p>测试</p>            </div><h2 id="时间轴"><a href="#时间轴" class="headerlink" title="时间轴"></a>时间轴</h2><div class="timeline blue"><div class='timeline-item headline'>        <div class='timeline-item-title'>          <div class='item-circle'><p>时间轴样式</p></div>        </div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p>2020-07-24 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases">2.6.6 -&gt; 3.0</a></p></div>        </div>        <div class='timeline-item-content'><ol><li>如果有 <code>hexo-lazyload-image</code> 插件，需要删除并重新安装最新版本，设置 <code>lazyload.isSPA: true</code>。</li><li>2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <code>use_cdn: true</code> 则需要删除。</li><li>2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</li><li>2.x 版本的置顶 <code>top: true</code> 改为了 <code>pin: true</code>，并且同样适用于 <code>layout: page</code> 的页面。</li><li>如果使用了 <code>hexo-offline</code> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</li></ol></div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p></div>        </div>        <div class='timeline-item-content'><p>不需要额外处理。</p></div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p>2020-04-20 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.6.2 -&gt; 2.6.3</a></p></div>        </div>        <div class='timeline-item-content'><ol><li>全局搜索 <code>seotitle</code> 并替换为 <code>seo_title</code>。</li><li>group 组件的索引规则有变，使用 group 组件的文章内，<code>group: group_name</code> 对应的组件名必须是 <code>group_name</code>。</li><li>group 组件的列表名优先显示文章的 <code>short_title</code> 其次是 <code>title</code>。</li></ol></div>      </div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Test-外挂标签&quot;&gt;&lt;a href=&quot;#Test-外挂标签&quot; class=&quot;headerlink&quot; title=&quot;Test 外挂标签&quot;&gt;&lt;/a&gt;Test 外挂标签&lt;/h1&gt;&lt;h2 id=&quot;行内span&quot;&gt;&lt;a href=&quot;#行内span&quot; class=&quot;head</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://atelieryu.site/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Protobuf入门使用</title>
    <link href="https://atelieryu.site/posts/522b2664.html"/>
    <id>https://atelieryu.site/posts/522b2664.html</id>
    <published>2025-03-04T01:48:00.000Z</published>
    <updated>2025-03-19T02:06:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://protobuf.com.cn/programming-guides/proto3/">proto3官方教程</a></li><li><a href="https://subingwen.cn/cpp/protobuf/">参考博客</a></li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="源码下载与安装"><a href="#源码下载与安装" class="headerlink" title="源码下载与安装"></a>源码下载与安装</h2><ul><li><a href="https://github.com/protocolbuffers/protobuf/releases">github源代码下载地址</a></li><li><a href="https://github.com/protocolbuffers/protobuf/releases">3.21.12版本安装较为简单</a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以 protobuf 3.21.12 为例</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">自行下载源码包, 解压缩</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tar zxvf protobuf-cpp-3.21.12.tar.gz</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入到解压目录</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> protobuf-3.21.12/</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建并安装</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./configure         <span class="comment"># 检查安装环境, 生成 makefile</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make                <span class="comment"># 编译</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> make install   <span class="comment"># 安装</span></span></span><br></pre></td></tr></table></figure><h3 id="动态库链接失败处理"><a href="#动态库链接失败处理" class="headerlink" title="动态库链接失败处理"></a>动态库链接失败处理</h3><p>可以使用<code>$ protoc --version</code>测试是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试时发现动态库链接失败</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">protoc --version</span></span><br><span class="line">protoc: error while loading shared libraries: libprotoc.so.32: cannot open shared object file: No such file or directory</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方法1：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">find指令查找动态库路径</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> find /usr/local/ -name libprotoc.so</span>     </span><br><span class="line">/usr/local/lib/libprotoc.so</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将查找到的目录添加到/etc/ld.so.conf配置文件中：</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> vim /etc/ld.so.conf</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">尾部追加/usr/local/lib/</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方法2</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">直接使用ldconfig指令</span></span><br><span class="line">sudo ldconfig</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">处理完成后：</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">protoc --version</span></span><br><span class="line">libprotoc 3.21.12</span><br></pre></td></tr></table></figure><h1 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h1><h2 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h2><ol><li><p>确定数据格式，数据可简单可复杂，比如：</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要序列化的数据</span></span><br><span class="line"><span class="comment">// 第一种: 单一数据类型</span></span><br><span class="line"><span class="type">int</span> number;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种: 复合数据类型</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    string name;</span><br><span class="line">    string sex;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>创建一个新的文件, 文件名随意指定, 文件后缀为 .proto</p></li><li><p>根据protobuf的语法, 编辑.proto文件</p></li><li><p>使用 protoc 命令将 .proto 文件转化为相应的 C++ 文件</p><ul><li>源文件: xxx.pb.cc –&gt; xxx对应的名字和 .proto文件名相同</li><li>头文件: xxx.pb.h –&gt; xxx对应的名字和 .proto文件名相同</li></ul></li><li><p>需要将生成的c++文件添加到项目中, 通过文件中提供的类 API 实现数据的序列化&#x2F;反序列化</p><blockquote><p>Protobuf与C++的类型对照</p></blockquote></li></ol><ul><li>几个主要注意点：<ul><li>C++中的string到Protobuf中统一使用bytes比较好</li><li>C++中的整型到Protobuf中为 int+size，如int→int32</li><li>C++中的结构体与类对应到Protobuf中为message（消息体）<ul><li>Protobuf中其他类型最终也都要封装到消息体里</li></ul></li></ul></li></ul><p><img src="https://atelieryu.xyz/elog/202503/406ba403b533f2b5dadcd79db8664f31.png" alt="image.png"></p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="type">int32</span> id = <span class="number">1</span>;</span><br><span class="line">    <span class="type">bytes</span> name = <span class="number">2</span>;</span><br><span class="line">    <span class="type">bytes</span> sex = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int32</span> age = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>生成对应的.h和.c文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">protoc &lt;proto文件路径&gt; --cpp_out=&lt;输出路径&gt;</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">protoc Person.proto --cpp_out=./</span></span><br></pre></td></tr></table></figure><h3 id="repeated关键字"><a href="#repeated关键字" class="headerlink" title="repeated关键字"></a>repeated关键字</h3><ul><li>repeated标志对应的成员是动态数组</li></ul><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">repeated</span> <span class="type">int32</span> id = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><ul><li>proto3 中的<strong>第一个枚举值必须为 0</strong>，第一个元素以外的元素值可以随意指定</li></ul><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义枚举类型</span></span><br><span class="line"><span class="keyword">enum </span><span class="title class_">Color</span></span><br><span class="line">&#123;</span><br><span class="line">    Red = <span class="number">0</span>;</span><br><span class="line">    Green = <span class="number">3</span>;<span class="comment">// 第一个元素以外的元素值可以随意指定</span></span><br><span class="line">    Yellow = <span class="number">6</span>;</span><br><span class="line">    Blue = <span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在该文件中对要序列化的结构体进行描述</span></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int32</span> id = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">repeated</span> <span class="type">bytes</span> name = <span class="number">2</span>;</span><br><span class="line">    <span class="type">bytes</span> sex = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int32</span> age = <span class="number">4</span>;</span><br><span class="line">    <span class="comment">// 枚举类型</span></span><br><span class="line">    Color color = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="proto文件的导入"><a href="#proto文件的导入" class="headerlink" title="proto文件的导入"></a>proto文件的导入</h3><ul><li>使用<code>import</code>语句在当前.ptoto中导入其它的.proto文件。这样就可以在一个.proto文件中引用并使用其它文件中定义的消息类型和枚举类型。</li></ul><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"><span class="comment">// 使用另外一个proto文件中的数类型, 需要导入这个文件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;Address.proto&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在该文件中对要序列化的结构体进行描述</span></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int32</span> id = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">repeated</span> <span class="type">bytes</span> name = <span class="number">2</span>;</span><br><span class="line">    <span class="type">bytes</span> sex = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int32</span> age = <span class="number">4</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加地址信息, 使用的是外部proto文件中定义的数据类型</span></span><br><span class="line">    Address addr = <span class="number">6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="包（package）"><a href="#包（package）" class="headerlink" title="包（package）"></a>包（package）</h3><ul><li>在 Protobuf 中，可以使用package关键字来定义一个消息所属的包（package）。包是用于组织和命名消息类型的一种机制，<strong>类似于命名空间的概念</strong></li><li>在一个.proto文件中，可以通过在顶层使用package关键字来定义包：</li></ul><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"><span class="comment">// 添加命名空间 Dabing</span></span><br><span class="line"><span class="keyword">package</span> Dabing;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 地址信息, 这个Address类属于命名空间: Dabing</span></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Address</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">bytes</span> addr = <span class="number">1</span>;</span><br><span class="line">    <span class="type">bytes</span> number = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>其他.proto文件导入以上文件后，可以通过<code>Dabing.Address</code>使用该文件定义的消息体Address</li><li>.c文件使用该proto文件生成的对象时，通过<code>Dabing::Address</code>使用该文件定义的消息体</li></ul><h2 id="Protobuf-API"><a href="#Protobuf-API" class="headerlink" title="Protobuf API"></a>Protobuf API</h2><p>通过对象调用Protobuf API</p><h3 id="成员操作"><a href="#成员操作" class="headerlink" title="成员操作"></a>成员操作</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取成员的const版本（数组成员需要传入索引）</span></span><br><span class="line">&lt;成员名&gt;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取成员的可修改版本（数组成员需要传入索引）</span></span><br><span class="line"><span class="built_in">mutable_</span>&lt;成员名&gt;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置成员（数组成员需要传入索引）</span></span><br><span class="line"><span class="built_in">set_</span>&lt;成员名&gt;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空成员</span></span><br><span class="line"><span class="built_in">clear_</span>&lt;成员名&gt;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数组成员的size</span></span><br><span class="line">&lt;成员名&gt;_size()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向数组中添加成员</span></span><br><span class="line"><span class="built_in">add_</span>&lt;成员名&gt;()</span><br></pre></td></tr></table></figure><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 头文件目录: google\protobuf\message_lite.h</span></span><br><span class="line"><span class="comment">// --- 将序列化的数据 数据保存到内存中</span></span><br><span class="line"><span class="comment">// 将类对象中的数据序列化为字符串: C++风格的字符串, 参数是一个传出参数</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">SerializeToString</span><span class="params">(std::string* output)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">// 将类对象中的数据序列化为字符串: C风格的字符串, 参数 data 是一个传出参数</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">SerializeToArray</span><span class="params">(<span class="type">void</span>* data, <span class="type">int</span> size)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------ 写磁盘文件, 只需要调用这个函数, 数据自动被写入到磁盘文件中</span></span><br><span class="line"><span class="comment">// -- 需要提供流对象/文件描述符关联一个磁盘文件</span></span><br><span class="line"><span class="comment">// 将数据序列化写入到磁盘文件中, c++ 风格</span></span><br><span class="line"><span class="comment">// ostream 子类 ofstream -&gt; 写文件</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">SerializeToOstream</span><span class="params">(std::ostream* output)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">// 将数据序列化写入到磁盘文件中, c 风格</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">SerializeToFileDescriptor</span><span class="params">(<span class="type">int</span> file_descriptor)</span> <span class="type">const</span></span>;</span><br></pre></td></tr></table></figure><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 头文件目录: google\protobuf\message_lite.h</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ParseFromString</span><span class="params">(<span class="type">const</span> std::string&amp; data)</span> </span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ParseFromArray</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* data, <span class="type">int</span> size)</span></span>;</span><br><span class="line"><span class="comment">// istream -&gt; 子类 ifstream -&gt; 读操作</span></span><br><span class="line"><span class="comment">// wo ri</span></span><br><span class="line"><span class="comment">// w-&gt;写 o: ofstream , r-&gt;读 i: ifstream</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ParseFromIstream</span><span class="params">(std::istream* input)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ParseFromFileDescriptor</span><span class="params">(<span class="type">int</span> file_descriptor)</span></span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://protobuf.com.cn/programming-guides/prot</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://atelieryu.site/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="后端" scheme="https://atelieryu.site/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="RPC" scheme="https://atelieryu.site/tags/RPC/"/>
    
    <category term="Protobuf" scheme="https://atelieryu.site/tags/Protobuf/"/>
    
  </entry>
  
</feed>
